//Базовый URL: https://example.com/api/

Методы

Отправка вопроса:
bash//

POST /questions HTTP/1.1
Host: example.com
Content-Type: application/json

{
    "question": "Какие достопримечательности Парижа?"
}
Получение ответа на вопрос:
perl
Copy code
GET /answers?question=Какие%20достопримечательности%20Парижа%3F HTTP/1.1
Host: example.com
Добавление новых тренировочных данных:
bash
Copy code
POST /training-data HTTP/1.1
Host: example.com
Content-Type: application/json

{
    "question": "Какие достопримечательности Барселоны?",
    "answer": "Саграда Фамилия, Парк Гюэль, Ла Рамбла"
}
Получение всех тренировочных данных:
vbnet
Copy code
GET /training-data HTTP/1.1
Host: example.com
Получение конкретного тренировочного примера:
vbnet
Copy code
GET /training-data/1 HTTP/1.1
Host: example.com
Обновление тренировочного примера:
bash
Copy code
PUT /training-data/1 HTTP/1.1
Host: example.com
Content-Type: application/json

{
    "question": "Какие достопримечательности Парижа?",
    "answer": "Эйфелева башня, Лувр, Нотр-Дам де Пари"
}
Удаление тренировочного примера:
bash
Copy code
DELETE /training-data/1 HTTP/1.1
Host: example.com
Заголовки

Content-Type: указывает формат тела запроса или ответа.
Authorization: содержит токен доступа для аутентификации запросов.
Форматы данных

Вопросы и ответы хранятся в формате JSON:
json
Copy code
{
    "question": "Какие достопримечательности Парижа?",
    "answer": "Эйфелева башня, Лувр, Нотр-Дам де Пари"
}
Ответ на вопрос также представляется в формате JSON:
json
Copy code
{
    "answer": "Эйфелева башня, Лувр, Нотр-Дам де Пари"
}
Ошибки представлены в формате JSON:
json
Copy code
{
    "error": "Не удалось обработать запрос."
}
Коды ответов

200 OK: запрос успешно обработан, ответ на вопрос возвращен.
201 Created: тренировочные данные успешно добавлены.
204 No Content: тренировочные данные успешно удалены или обновлены.
400 Bad Request: запрос не соответствует формату или содержит некорректные данные.
401 Unauthorized
